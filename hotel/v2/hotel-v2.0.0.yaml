openapi: 3.1.0
info:
  version: 2.0.0
  title: Hotel
  termsOfService: 'https://example.com/terms/'
  contact:
    email: contact@example.com
    url: 'https://example.org/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://raw.githubusercontent.com/FinnNielsen/TravelingApi/main/images/sheepr.gif'
  description:
    $ref: ./info-description.md

tags:
  - name: Search
    description: Search for hotel.
  - name: Book room
    description: Book room
  - name: Cancel reservation
    description: Cancel Reservation.

servers:
  - url: 'https://{tenant}/api/v2'
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: 'https://example.com/api/v2'

paths:
  /api/v2/hotel/search/:
    post:
      tags:
        - Search
      operationId: search
      security:
        - api_key: []
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              discriminator:
                propertyName: subscription
                mapping:
                  Standard: '#/components/schemas/standard_search'
                  Premium: '#/components/schemas/premium_search'
              oneOf:
                - $ref: '#/components/schemas/standard_search'
                - $ref: '#/components/schemas/premium_search'
        description: Payload
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../../components/schemas/v2/hotel.yaml
        '400':
          description: Unauthorized

  /api/v2/hotel/book/:
    post:
      tags:
        - Book room
      operationId: search
      security:
        - api_key: []
        - basic_auth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/booking_request'
        description: Payload
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Unauthorized

components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic

  schemas:

    standard_search:
      type: object
      required:
        - subscription
      properties:
        subscription:
          type: string
        name:
          type: string
        address:
          $ref: ../../components/schemas/v2/address.yaml
        room_type:
          type: string
          enum: [economy, standard, luxury]
        people:
          type: integer

    premium_search:
      type: object
      required:
        - subscription
        - subscription_code
      properties:
        subscription:
          type: string
        subscription_code:
          type: string
        name:
          type: string
        address:
          $ref: ../../components/schemas/v2/address.yaml
        room_type:
          type: string
          enum: [standard, luxury, suite]
        people:
          type: integer

    booking_request:
      type: object
      required:
        - hotel_id
        - name
        - room_type
        - people
      properties:
        hotel_id:
          type: string
        name:
          type: string
        room_type:
          type: string
          enum: [standard, luxury, suite]
        people:
          type: integer
